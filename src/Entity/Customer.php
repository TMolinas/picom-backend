<?php

namespace App\Entity;

use App\Repository\CustomerRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\ORM\Mapping\Entity;
use Symfony\Component\Serializer\Annotation\Groups;

/**
 *
 * @ORM\Entity(repositoryClass=CustomerRepository::class)
 * @Entity
 */
class Customer extends User
{

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     * @Groups("customer:read")
     */
    private $phone;

    /**
     * @ORM\OneToMany(targetEntity=Card::class, mappedBy="customer")
     * @ORM\JoinColumn(nullable=true)
     */
    private $cards;

    /**
     * @ORM\OneToMany(targetEntity=Advertising::class, mappedBy="customer")
     */
    private $advertisings;

    /**
     * @ORM\ManyToMany(targetEntity=BankCard::class, mappedBy="customers")
     */
    private $bankCards;

    public function __construct()
    {
        parent::__construct();
        $this->cards = new ArrayCollection();
        $this->advertisings = new ArrayCollection();
        $this->bankCards = new ArrayCollection();
    }



    public function getPhone(): ?string
    {
        return $this->phone;
    }

    public function setPhone(?string $phone): self
    {
        $this->phone = $phone;

        return $this;
    }



    public function getRoles(): array
    {
        $roles= parent::getRoles(); // TODO: Change the autogenerated stub
        $roles[] = 'ROLE_USER';
        return array_unique($roles);
    }

    /**
     * @return Collection|Card[]
     */
    public function getCards(): Collection
    {
        return $this->cards;
    }

    public function addCard(Card $card): self
    {
        if (!$this->cards->contains($card)) {
            $this->cards[] = $card;
            $card->setCustomer($this);
        }

        return $this;
    }

    public function removeCard(Card $card): self
    {
        if ($this->cards->removeElement($card)) {
            // set the owning side to null (unless already changed)
            if ($card->getCustomer() === $this) {
                $card->setCustomer(null);
            }
        }

        return $this;
    }

    public function __toString(): string {
        return "";
    }

    /**
     * @return Collection|Advertising[]
     */
    public function getAdvertisings(): Collection
    {
        return $this->advertisings;
    }

    public function addAdvertising(Advertising $advertising): self
    {
        if (!$this->advertisings->contains($advertising)) {
            $this->advertisings[] = $advertising;
            $advertising->setCustomer($this);
        }

        return $this;
    }

    public function removeAdvertising(Advertising $advertising): self
    {
        if ($this->advertisings->removeElement($advertising)) {
            // set the owning side to null (unless already changed)
            if ($advertising->getCustomer() === $this) {
                $advertising->setCustomer(null);
            }
        }

        return $this;
    }

    /**
     * @return Collection|BankCard[]
     */
    public function getBankCards(): Collection
    {
        return $this->bankCards;
    }

    public function addBankCard(BankCard $bankCard): self
    {
        if (!$this->bankCards->contains($bankCard)) {
            $this->bankCards[] = $bankCard;
            $bankCard->addCustomer($this);
        }

        return $this;
    }

    public function removeBankCard(BankCard $bankCard): self
    {
        if ($this->bankCards->removeElement($bankCard)) {
            $bankCard->removeCustomer($this);
        }

        return $this;
    }


}